---
import "../css/slick-review.css";

const images = [
  { src: "/IMG_9545.jpg", width: 5184, height: 3456 },
  { src: "/IMG_0233.jpg", width: 5184, height: 3456 },
  { src: "/IMG_0178.jpg", width: 5179, height: 3456 },
];
---

<photos-carousel
  class="splide flex justify-center relative max-w-[100%] w-[100%]" data-pslb={JSON.stringify(images)}
>
  <div class="splide__track">
    <div class="splide__list" id="splide-list-pslb">
      {images.map((image, i) => (
        <div class="splide__slide px-10 pt-10 pb-16 cursor-pointer">
          <img
            src={`${import.meta.env.BASE_URL}/lazyload-project.svg`}
            data-splide-lazy={image.src}
            class="w-full rounded"
            alt={`Slide ${i+1}`}
          />
          {/* md:rounded-[2rem] rounded-3xl shadow-[0_0_26px_0_rgba(0,0,0,0.25)] shadow-neutral-500 hover:shadow-neutral-700 dark:shadow-neutral-900 dark:hover:shadow-neutral-950 transition duration-500 */}
        </div>
      ))}
    </div>
  </div>
</photos-carousel>
<script>
  import { Splide, type Options as SplideOptions } from "@splidejs/splide";
  import { Intersection } from "@splidejs/splide-extension-intersection";

  import PhotoSwipeLightbox from "photoswipe/lightbox";
  import "photoswipe/style.css";

  const options: SplideOptions = {
    type: "loop",
    autoplay: "pause",
    interval: 4000,
    pauseOnHover: true,
    lazyLoad: "nearby",
    preloadPages: 1,
    updateOnMove: true,
    arrows: false,
    padding: "33.5%",
    intersection: {
      inView: {
        autoplay: true,
      },
      outView: {
        autoplay: false,
      },
    },
    breakpoints: {
      2100: {
        // 4xl
        padding: "31.5%",
      },
      1800: {
        // 3xl
        padding: "29.5%",
      },
      1536: {
        // 2xl
        padding: "27.5%",
      },
      1280: {
        // xl
        padding: "25%",
      },
      1024: {
        // lg
        padding: "20%",
      },
      768: {
        // md
        padding: "10%",
      },
      640: {
        // sm
        padding: "10px",
      },
    },
  };

  class PhotosCarousel extends HTMLElement {
    splide: Splide | null = null;
    lightbox: PhotoSwipeLightbox | null = null;

    constructor() {
      super();
    }

    handleClick(ev: MouseEvent) {
      let target = ev.target;

      for (let i = 0; target != null && i < 5; i++) {
        if (target instanceof HTMLElement) {
          if (target.classList.contains("splide__slide")) {
            console.debug(`target parent #${i} is slide`, target);
            if (target.classList.contains("is-prev")) {
              ev.preventDefault();
              this.handlePrev();
            } else if (target.classList.contains("is-next")) {
              ev.preventDefault();
              this.handleNext();
            } else {
              console.debug("slide not is-prev or is-next, opening pslb...");

              let intersect = true;
              if (this.lightbox) {
                this.lightbox.destroy();
              }
              this.lightbox = new PhotoSwipeLightbox({
                dataSource: JSON.parse(this.dataset.pslb || "[]"),
                pswpModule: () => import("photoswipe"),
              });
              this.lightbox.on('close', () => {
                console.log("lightbox>close")
                this.splide?.off('intersection:in');
                this.splide?.off('intersection:out');
                if (intersect) {
                  this.splide?.Components.Autoplay.play();
                }
              });
              this.lightbox.init();

              this.splide?.Components.Autoplay.pause();
              this.splide?.on('intersection:in', function (_entry) {
                console.log("splide>intersection:in");
                intersect = true;
              });
              this.splide?.on('intersection:out', function (_entry) {
                console.log("splide>intersection:out");
                intersect = false;
              });
              this.lightbox.loadAndOpen(this.splide?.index || 0);
            }
            return;
          } else {
            target = target.parentElement;
          }
        } else {
          console.debug("target !instanceof HTMLElement, aborting...", target);
          return;
        }
      }
    }

    handlePrev() {
      console.debug("got to prev slide");
      this.splide?.go("<");
    }

    handleNext() {
      console.debug("go to next slide");
      this.splide?.go(">");
    }

    connectedCallback() {
      this.splide = new Splide(this, options);
      this.splide.mount({ Intersection });
      this.addEventListener("click", this.handleClick);
    }

    disconnectedCallback() {
      this.removeEventListener("click", this.handleClick);
      this.splide?.destroy();
    }
  }
  window.customElements.define("photos-carousel", PhotosCarousel);
</script>
